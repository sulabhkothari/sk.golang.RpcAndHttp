// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamsvc.proto

package streamsvc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_b728a77ddea567e0, []int{0}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Chat struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chat) Reset()         { *m = Chat{} }
func (m *Chat) String() string { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()    {}
func (*Chat) Descriptor() ([]byte, []int) {
	return fileDescriptor_b728a77ddea567e0, []int{1}
}

func (m *Chat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chat.Unmarshal(m, b)
}
func (m *Chat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chat.Marshal(b, m, deterministic)
}
func (m *Chat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chat.Merge(m, src)
}
func (m *Chat) XXX_Size() int {
	return xxx_messageInfo_Chat.Size(m)
}
func (m *Chat) XXX_DiscardUnknown() {
	xxx_messageInfo_Chat.DiscardUnknown(m)
}

var xxx_messageInfo_Chat proto.InternalMessageInfo

func (m *Chat) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Chat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Req)(nil), "Req")
	proto.RegisterType((*Chat)(nil), "Chat")
}

func init() { proto.RegisterFile("streamsvc.proto", fileDescriptor_b728a77ddea567e0) }

var fileDescriptor_b728a77ddea567e0 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0x2d, 0x2e, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x12, 0xe5, 0x62, 0x0e,
	0x4a, 0x2d, 0x14, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x62,
	0xca, 0x4c, 0x51, 0x32, 0xe0, 0x62, 0x71, 0xce, 0x48, 0x2c, 0x41, 0x17, 0x17, 0x92, 0xe0, 0x62,
	0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71,
	0x8d, 0xd4, 0xb9, 0x78, 0x82, 0xc1, 0x66, 0x67, 0xe6, 0xa5, 0x07, 0x97, 0x25, 0x0b, 0x89, 0x73,
	0x31, 0xbb, 0xa7, 0x96, 0x08, 0xb1, 0xea, 0x81, 0xcc, 0x91, 0x82, 0x50, 0x1a, 0x8c, 0x06, 0x8c,
	0x49, 0x6c, 0x60, 0x8b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x17, 0x06, 0x3f, 0xcf, 0x8b,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamingSvcClient is the client API for StreamingSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamingSvcClient interface {
	Get(ctx context.Context, opts ...grpc.CallOption) (StreamingSvc_GetClient, error)
}

type streamingSvcClient struct {
	cc *grpc.ClientConn
}

func NewStreamingSvcClient(cc *grpc.ClientConn) StreamingSvcClient {
	return &streamingSvcClient{cc}
}

func (c *streamingSvcClient) Get(ctx context.Context, opts ...grpc.CallOption) (StreamingSvc_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamingSvc_serviceDesc.Streams[0], "/StreamingSvc/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingSvcGetClient{stream}
	return x, nil
}

type StreamingSvc_GetClient interface {
	Send(*Chat) error
	Recv() (*Chat, error)
	grpc.ClientStream
}

type streamingSvcGetClient struct {
	grpc.ClientStream
}

func (x *streamingSvcGetClient) Send(m *Chat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingSvcGetClient) Recv() (*Chat, error) {
	m := new(Chat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingSvcServer is the server API for StreamingSvc service.
type StreamingSvcServer interface {
	Get(StreamingSvc_GetServer) error
}

func RegisterStreamingSvcServer(s *grpc.Server, srv StreamingSvcServer) {
	s.RegisterService(&_StreamingSvc_serviceDesc, srv)
}

func _StreamingSvc_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingSvcServer).Get(&streamingSvcGetServer{stream})
}

type StreamingSvc_GetServer interface {
	Send(*Chat) error
	Recv() (*Chat, error)
	grpc.ServerStream
}

type streamingSvcGetServer struct {
	grpc.ServerStream
}

func (x *streamingSvcGetServer) Send(m *Chat) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingSvcGetServer) Recv() (*Chat, error) {
	m := new(Chat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamingSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StreamingSvc",
	HandlerType: (*StreamingSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _StreamingSvc_Get_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streamsvc.proto",
}
